best pro max:

class Solution {
public:
    vector<int> spiralOrder(vector<vector<int>>& m) 
    {
        vector<int> ans ;
        if(m.size()==0) 
            return {};
        int R= m.size();
        int C=m[0].size();
        
        if(R==1) return m[0];
        
        vector<vector<bool>> seen (R , vector<bool> (C));
        
        int dr[] = {0,1,0,-1};
        int dc[] = {1,0,-1,0};
        int r=0,c=0,di=0;
        for(int i=0; i<R*C;i++)
        {
            ans.push_back(m[r][c]);
            seen[r][c] = true;
            int cr = r+dr[di];
            int cc = c+dc[di];
            if(0<=cr<R && cr<R && 0<=cc && cc<C && !seen[cr][cc])
            {
                r=cr;
                c=cc;
            }
            else
            {
                di=(di + 1) % 4;
                r+=dr[di];
                c+=dc[di];
            }
        }
        return ans;
        
    }
};


=====================================================================================================================================
works but not best:

class Solution {
public:
    vector<int> spiralOrder(vector<vector<int>>& a) 
    {
         vector<int> ans;
        int n = a.size();
        int m = a[0].size();
        int i, k = 0, l = 0;
     
        while (k < m && l < n) 
        {
            for (i = l; i < n; ++i) 
            {
                ans.push_back(a[k][i]);
            }
            k++;
     
            for (i = k; i < m; ++i) 
            {
                ans.push_back(a[i][n - 1]);
            }
            n--;
     
            if (k < m) 
            {
                for (i = n - 1; i >= l; --i) 
                {
                    ans.push_back(a[m - 1][i]);
                }
                m--;
            }
     
            if (l < n) 
            {
                for (i = m - 1; i >= k; --i) 
                {
                    ans.push_back(a[i][l]);
                }
                l++;
            }
        }
        return ans;
    }
};