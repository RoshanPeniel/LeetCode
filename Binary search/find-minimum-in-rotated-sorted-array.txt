works but not good (linear sort):

class Solution {
public:
    int findMin(vector<int>& v) 
    {
        sort(v.begin(),v.end());
        return v[0];
    }
};

======================================================================

Linear:

class Solution {
public:
    int findMin(vector<int>& v) 
    {
        int x=v[0];
        for(int i:v)
            if(i<x) 
                x=i;
        return x;
    }
};

=======================================================================

best(Binary sch):

class Solution {
public:
    int findMin(vector<int>& v) 
    {
        int n=v.size();
        if(n==1) return v[0];
        int hi=n-1,lo=0;
        
        if(v[hi]>v[0])  return v[0];
        
        while(hi>=lo)
        {
            int mid=lo+(hi-lo)/2;
            if(v[mid]>v[mid+1]) 
                return v[mid+1];
            if(v[mid-1]>v[mid]) 
                return v[mid];
            if(v[mid]>v[0])
                lo=mid+1;
            else
                hi=mid-1;
        }
        return -1;
    }
};

===========================================================================

best max:

class Solution {
public:
	int findMin(vector<int>& nums) {
		int n = nums.size();
		int left = 0;
		int right = n - 1;
        if(right == 0)
        {
            return nums[0];
        }
		while (left <= right)
		{
			int mid = left + (right - left) / 2;
			if ((mid > 0) && ((mid + 1) <= n - 1) && (nums[mid - 1]) > nums[mid] && nums[mid] < nums[mid + 1])
			{
				return nums[mid];
			}
			if ((mid == 0) && (mid < right) && (nums[mid] < nums[mid + 1]))
			{
				return nums[mid];
			}
			if ((mid == n - 1) && (mid > 0) && (nums[mid] < nums[mid - 1]))
			{
				return nums[mid];
			}
			if (nums[mid] < nums[right])
			{
				right = mid - 1;
			}
			else
			{
				left = mid + 1;
			}
		}
		return nums[0];
	}
};
