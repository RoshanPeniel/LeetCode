linear:

class Solution {
public:
    int kthSmallest(vector<vector<int>>& m, int k) 
    {
        int r=m.size(),c=m[0].size();
        vector<int> ans;        
        for(int i=0; i<r; i++)
        {
            for(int j=0; j<c; j++)
            {
                ans.push_back(m[i][j]);   
            }
        }        
        sort(ans.begin(),ans.end());        
        return ans[k-1];
    }
};

======================================================================

binary search:

class Solution {
public:
    int kthSmallest(vector<vector<int>>& m, int k) {
        
        int r = m.size(),c = m[0].size();
        int lo = m[0][0],hi = m[r - 1][c - 1];
        int cnt,j,mid;        
        while (lo < hi) 
        {
            mid = (lo + hi) / 2;
            cnt = 0,  j = c - 1;
            
            for (int i = 0; i < r; i++) 
            {
                while (j >= 0 && m[i][j] > mid) 
                {
                    j--;
                }
                cnt+= (j + 1);
            }
            
            if (cnt < k)  lo = mid + 1;
            else  hi = mid;
        }
        
        return lo;
    }
};
