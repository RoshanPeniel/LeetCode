best:

#include <iostream> 
#include <set> 
#include <vector> 
#include <bits/stdc++.h>
using namespace std;
class Solution {
public:
    int firstMissingPositive(vector<int>& v) 
    {
        int n=v.size(),x=1;
        sort(v.begin(), v.end());
        
        vector<int>::iterator ip; 
  
        ip = std::unique(v.begin(), v.end()); 
        v.resize(std::distance(v.begin(), ip)); 
        
        for(int i:v)
        {
            if(i>0)
            {
                if(i!=x)
                {
                    break;
                }
                else
                {
                    x++;
                }
            }
            
        }
        
        return x;
    }
};

int main()
{
   vector<int> v = {0,2,2,1,1};
   
   Solution s;
   
   int a=s.firstMissingPositive(v);
   
   cout<<a;
   
   return 0;
}

=============================================================================
same:

class Solution {
public:
    int firstMissingPositive(vector<int>& v) 
    {
        int n=v.size(),x=1;
        sort(v.begin(), v.end());        
        vector<int>::iterator ip;   
        ip = std::unique(v.begin(), v.end()); 
        v.resize(std::distance(v.begin(), ip)); 
        for(int i:v)
        {
            if(i>0)
            {
                if(i!=x)    break;
                else    x++;
            }
        }
        return x;
    }
};

