#include <iostream> 
#include <set> 
#include <vector> 
#include <bits/stdc++.h>
using namespace std;

class Solution {
public:
    vector<int> findDisappearedNumbers(vector<int>& v) 
    {
        vector<int> ans;
        int n= v.size();
        
        for(int i:v)
        {
            int ind=abs(i)-1;
            if(v[ind]>0)
            {
                v[ind] = -v[ind];
            }
        }
        
        for(int i=0; i<=n; i++)
        {
            if(v[i]>0)
            {
                ans.push_back(i+1);
            }
        }
        return ans;
    }
};

int main()
{
   Solution s;
   vector<int> v = {4,3,2,7,8,2,3,1};
   
   vector<int> a = s.findDisappearedNumbers(v);
   
   for(int i=0; i < a.size(); i++)
   std::cout << a.at(i) << ' ';
   
   
   return 0;
}

----------------------------------------------------------------------


class Solution {
public:
    vector<int> findDisappearedNumbers(vector<int>& v) 
    {
        vector<int> ans;
        int n= v.size(), i=1;
        
        sort(v.begin() , v.end());
        
        vector<int>::iterator ip; 
  
        ip = std::unique(v.begin(), v.end()); 
      
        v.resize(std::distance(v.begin(), ip)); 
      
 ''''
        }
      
        
        return ans;
    }
};

--------------------------------------------------------------------------

best:

class Solution {
public:
    vector<int> findDisappearedNumbers(vector<int> &v)
    {
        int n=v.size();
        vector<int> dp(n+ 1), ans;
        for (int i = 0; i < n; i++)   dp[v[i]] = 1;
        for (int i = 1; i < n+1; i++) if (dp[i] == 0) ans.push_back(i);
        return ans;
    }
};

======================================================================

display pixel:

eg: {1,2,3,1}

dp: 0 1 1 1 0 

zero is missing
======================================================================


best max:

class Solution {
public:
    Solution(){
        ios_base::sync_with_stdio(0);
        cin.tie(0);
    }
    vector<int> findDisappearedNumbers(vector<int>& nums) {
        int n=nums.size();
        vector<int> dp(n+1, 0), ans;
        
        for(int i=0; i<n; i++){
            dp[nums[i]]++;
        }
        
        for(int i=1; i<=n; i++){
            if(dp[i]==0){
                ans.push_back(i);
            }
        }
        
        return ans;
    }
};


-------------------------------------------------------------------------

best max pro:

class Solution {
public:
    Solution(){
        ios_base::sync_with_stdio(0);
        cin.tie(0);
    }
    vector<int> findDisappearedNumbers(vector<int>& v) {
        int n=v.size();
        vector<int> dp(n+1, 0), ans;
        for(int i=0; i<n; i++)  dp[v[i]]=1;
        for(int i=1; i<=n; i++) if(dp[i]==0) ans.push_back(i);
        return ans;
    }
};
