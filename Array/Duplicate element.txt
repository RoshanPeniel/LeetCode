class Solution {
public:
    bool containsDuplicate(vector<int>& a) 
    {
        sort(a.begin(), a.end());
        auto it = std::unique( a.begin(), a.end() );
        bool wasUnique = !(it == a.end() );
        return wasUnique;
        
        
    }
};


-----------------------------------------------------------------------


class Solution {
public:
    bool containsDuplicate(vector<int>& a) 
    {
        set<int> s; 
        for (int x : a) 
        { 
            s.insert(x); 
        } 
        
        if(a.size() != s.size()) return true;
        else return false;
    }
};


------------------------------------------------------------------------

#include <iostream> 
#include <set> 
#include <vector> 
#include <bits/stdc++.h>
using namespace std;


class Solution {
public:
    bool containsDuplicate(vector<int>& a) 
    {
        sort(a.begin(), a.end());
        auto it = std::unique( a.begin(), a.end() );
        bool wasUnique = !(it == a.end() );
        return wasUnique;
        
        
    }
};

int main() {
    
    Solution q;
    // Write C++ code here
    vector<int> vect = {1,2,3,1}; 
 
    cout<<q.containsDuplicate(vect);

    return 0;
}

-----------------------------------------------------------------------

best:

class Solution {
public:
    bool containsDuplicate(vector<int>& nums)
    {
        ios_base::sync_with_stdio(false);
        cin.tie(NULL);
        cout.tie(NULL);
        if(nums.size()<=1)
            return 0;

        int minn = *min_element(nums.begin(),nums.end());
        int maxx = *max_element(nums.begin(),nums.end());
        
        int arr[maxx-minn+1];
        memset(arr,0,sizeof(arr));
        for(int i=0;i<nums.size();i++)
        {
            
            arr[nums[i]-minn]++;
            
            if(arr[nums[i]-minn]>1)
            {
                return 1;
            }
        }
        return 0;
    }
};

