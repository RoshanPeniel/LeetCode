fast:

class Solution {
public:
    ListNode* mergeTwoLists(ListNode* l1, ListNode* l2) {
        ListNode* n= new ListNode();
        ListNode* head=n;
        while(l1!=NULL&&l2!=NULL){
            if(l2->val>l1->val)
            {
                n->next=l1;
                l1=l1->next;
            }
            else
            {
                n->next=l2;
                l2=l2->next;
            }
            n=n->next;
        }
        if(l1==NULL)
        {
            n->next=l2;
        }
        else if(l2==NULL)
        {
            n->next=l1;
        }
        return head->next;
    }
};

=========================================================================
works but slow:

class Solution {
public:
   ListNode* mergeTwoLists(ListNode* a, ListNode* b) 
   {
        if (!a || b && a->val > b->val) swap(a, b);
        if (a) a->next = mergeTwoLists(a->next, b);
        return a;
    }
};

=========================================================================
works:

class Solution {
public:
    ListNode* mergeTwoLists(ListNode* l1, ListNode* l2) {
        if(l1==NULL) return l2;
        if(l2==NULL) return l1;
        if(l1->val<=l2->val)
        {
            l1->next = mergeTwoLists(l1->next,l2);
            return l1;
        }
        if(l1->val>l2->val)
        {
            l2->next = mergeTwoLists(l1,l2->next);
            return l2;
        }
        return 0;
    }
};