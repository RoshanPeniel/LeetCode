fast: (2 pointer):

class Solution {
public:
    vector<vector<int>> threeSum(vector<int>& nums) {
        int* s;  
        int* e;  
        int fix=0,exp=0,sum=0,n=nums.size(); 
        vector<vector<int>> v;
        if(nums.size()<3)
            return v;    
        sort(nums.begin(),nums.end());                
        for(int i=0;i<nums.size();i++)
        {
            vector<int> vtemp(3,0);                        
            if(i!=0 && (nums[i-1]==nums[i])) continue;                       
            fix=nums[i]; 
            exp=-1*fix;  
            s=&nums[i+1];
            e=&nums[n-1];                       
            while(s<e)
            {
                sum=*s+*e;                
                if(sum==exp)
                {
                    vtemp[0]=nums[i];
                    vtemp[1]=*s;
                    vtemp[2]=*e;
                    v.push_back(vtemp);                 
                    s++;
                    while(s<e && *s==*(s-1))s++;
                }                                
                else if(sum<exp)s++;                
                else e--;
            }            
        }        
        return v;
    }
};

======================================================================

works but slow:

class Solution {
public:
    vector<vector<int>> threeSum(vector<int>& nums) {
        sort(nums.begin(), nums.end());
        vector<vector<int>> res;
        int len = nums.size();
        for (int i = 0; i < len - 2; ++i) {
            if (i > 0 && nums[i-1] == nums[i]) {
                continue;
            }
                
            int target = 0 - nums[i];
            int left = i + 1;
            int right = len - 1;
            while(left < right) {
                int sum = nums[left] + nums[right];
                if(sum == target) {
                    res.push_back({nums[i], nums[left], nums[right]});
                    while(left < right && nums[left] == nums[left+1]) {
                        left++;
                    }
                    while(left < right && nums[right] == nums[right-1]) {
                        right--;
                    }
                    left++;
                    right--;
                }
                else if(sum < target) {
                    left++;
                } else {
                    right--;
                } 
            }
        }
        
        return res;
    }
};